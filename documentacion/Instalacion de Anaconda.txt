Instalacion de Entorno de Desarrollo

- https://www.datacamp.com/community/tutorials/installing-anaconda-mac-os-x
- Creacion de un enviroment en conda
	* Desde el la interfaz grafica, vamos a ENVIROMENTS, y clicamos en "Create"
	* Elegimos un nombre, y la versión de python que queremos usar, y guardamos
	* Para activar y usar ese enviroment, desde la terminal ponemos: conda activate {enviroment}, donde enviroment será el nombre
	  de ese entorno
	* Para desactivar el entorno en el que estamos, usaremos: conda deactivate

	Sobre este entorno, podremos instalar los programas que queramos usar para desarrollar



Instalacion de Dash

Dentro de un entorno de conda, en una terminal, tecleamos lo siguiente:
	conda install -c conda-forge dash
Para instalar una version preferida, pondremos =={version}, ejemplo:
	conda install -c conda-forge dash==0.43.0

Esperamos, ya que es un proceso un poco lento, debe salir "Executing transaction: Done"


https://anaconda.org/conda-forge/dash

Para instalar dash-bootstrap, hay que tener cuidado, ya que hay versiones que solamente funcionan con ciertas versiones de python
En este caso, como trabajamos con la version 2.7 de python, nos sirve la versión 0.5.0 de dash-bootstrap.
Esto se puede ver en la página del paquete en Anaconda Cloud Forge, en la pestaña Files, y para cada paquete, en la pestaña (i),
allí miramos la característica "build".
En caso de que queramos instalar una versión no compatible, la consola de conda nos avisará que hay incompatibilidades con otros paquetes, y que es mejor abortar la operación pulsando Ctrl+C


Instalacion Numpy
- conda install numpy

Instalacion Matplotlib
- conda install matplotlib

Instalacion IPython
- conda install -c anaconda ipython

Instalacion WFDB
- conda install -c conda-forge wfdb

Instalacion WGET
- conda install -c anaconda wget

Instalacion Flask
- 

Instalacion MongoDB
- conda install -c anaconda mongodb

Instalacion Pymongo
- conda install -c anaconda pymongo

Instalacion Flask PyMongo
- pip install Flask-PyMongo

Tenemos dos instancias: mongod y mongo
- mongod -> proceso que se ejecuta para lanzar el servidor de mongo
- mongo  -> proceso que se ejecuta para lanzar el cliente de mongo

Para configurar mongodb
	- Crear el directorio "/data/db"
	- Darle permisos de solo lectura al directorio: "sudo chown -R $USER /data/db"
	- Para hacer andar el server de la bbdd: mongod
	- Para realizar peticiones a la BBDD, en otra terminal introducir: mongo 

	Ahora, hay que crear un usuario para realizar con autenticación las conexiones desde Flask
	
	Para crear el usuario:
		- Iniciamos mongoDB sin control de acceso:
			mongod --port 27017 --dbpath

		- Conectamos desde el cliente al servidor:
			mongo --port 27017

		- Creamos el usuario administrador:
			use admin
			db.createUser({user:"hexxa", pwd:"1708bilens",roles:[{role:"userAdminAnyDatabase",db: "admin"}], mechanisms: [ "SCRAM-SHA-1","SCRAM-SHA-256"]})

		- Reiniciamos el servidor de mongo, pero ahora con control de acceso:
			mongod --auth --port 27017 --dbpath /data/db1

		- Entramos desde el cliente indicando nuestras credenciales:
			mongo -u "hexxa" -p "1708bilens" --authenticationDatabase "admin"	

		- Creamos la BBDD para nuestra aplicacion:
			use EcgDB

		- Salimos, ahora entramos en la BBDD para agregar usuarios:
			mongo EcgDB -u "hexxa" -p "1708bilens" --authenticationDatabase "admin"

		- Creamos el usuario con roles de escritura/lectura para la BBDD "EcgDB"
			db.createUser({user:"hexxa", pwd:"1708bilens",roles:[{role:"userAdminAnyDatabase",db: "admin"}], mechanisms: [ "SCRAM-SHA-1","SCRAM-SHA-256"]})

		- En el servidor de Flask, realizamos la configuración para poder acceder a la BBDD:
			(mirar el fichero app.py, en server.config)
		
